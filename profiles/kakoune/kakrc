# create an if for conditional parsing
# ─────────────────────────
define-command -docstring "if <condition> <expression> [else [if <condition>] <expression>]: if statement that accepts shell-valid condition string" \
if -params 2.. %{ evaluate-commands %sh{
    while [ true ]; do
        condition="[ $1 ]"
        if [ -n "$3" ] && [ "$3" != "else" ]; then
            printf "%s\n" "fail %{if: unknown operator '$3'}"
        elif [ $# -eq 3 ]; then
            printf "%s\n" "fail %{if: wrong argument count}"
        elif eval $condition; then
            [ -n "${2##*&*}" ] && arg="$2" || arg="$(printf '%s' "$2" | sed 's/&/&&/g')"
            printf "%s\n" "evaluate-commands %& $arg &"
        elif [ $# -eq 4 ]; then
            [ -n "${4##*&*}" ] && arg="$4" || arg="$(printf '%s' "$4" | sed 's/&/&&/g')"
            printf "%s\n" "evaluate-commands %& $arg &"
        elif [ $# -gt 4 ]; then
            if [ "$4" = "if" ]; then
                shift 4
                continue
            else
                printf "%s\n" "fail %{if: wrong argument count}"
            fi
        fi
        exit
    done
}}

# Visula Options
# ─────────────────────────
set global ui_options ncurses_set_title=false
addhl global/ wrap
# Increase menu contrast
face global MenuBackground white,black
set global indentwidth 2

# Fuzzy Finders
# ─────────────────────────
def find-new -params 1 -shell-script-candidates %{ find -type f } %{ edit %arg{1}}
def find -params 1 -shell-script-candidates %{ fasd -f -l } %{ edit %arg{1}}
alias global f find

# Split Tmux 
# ─────────────────────────
define-command -params 0.. -file-completion \
  -docstring "split tmux pane vertically" split \
  %{ tmux-terminal-vertical kak -c %val{session} -e edit! %arg{@} }

define-command -params 0.. -file-completion \
  -docstring "split tmux pane horizontally" vsplit \
  %{ tmux-terminal-horizontal kak -c %val{session} -e edit! %arg{@} }

alias global sp split
alias global vs vsplit

# Git diff sidebar
# ─────────────────────────

if %[ "$(command git status 2>/dev/null)" ] %{
  hook global WinCreate .* %{ git show-diff }
  hook global BufWritePost .* %{ git show-diff }
  hook global ModeChange insert:normal %{ git show-diff }
}

# Snippets
# ─────────────────────────
#set-option global snippets_auto_expand true


# Default terminal
# ─────────────────────────
hook global ModuleLoaded "x11" %{
  set-option global termcmd "terminal bash -i -c"
}

# kak-lsp
# ─────────────────────────
eval %sh{kak-lsp --kakoune --session $kak_session}
set global lsp_cmd "kak-lsp -s %val{session} -vvv --log /tmp/kak-lsp.log"
hook global WinSetOption filetype=(rust|python|go|javascript|typescript|c|cpp|haskell|bash) %{
  map window user "l" ": enter-user-mode lsp<ret>" -docstring "LSP mode"
  lsp-enable-window
  lsp-auto-hover-enable
  lsp-auto-hover-insert-mode-disable
  set-option window lsp_hover_anchor true

}


# System clipboard handling
# ─────────────────────────
hook global WinCreate .* %{ kakboard-enable  }

# Repl Interaction
# ─────────────────────────
hook global WinSetOption filetype=python %{
  set window repl_send_command "python -i"
  set window repl_send_exit_command "exit()"
}
hook global WinSetOption filetype=r %{
  set window repl_send_command "R"
  set window repl_send_exit_command "q(save = \"no\")"
}



# Markdown
# ─────────────────────────

# This function is from https://github.com/TeddyDD/kakoune-wiki
# 
# ISC License
# 
# Copyright (c) 2018, Daniel Lewan
# 
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
# 
# THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

define-command wiki-follow-link \
-docstring %{ Follow markdown link and open or create file } %{
    evaluate-commands %{
        execute-keys %{
            <esc><a-a>c\[,\)<ret><a-:>
            <a-i>b
        }
        evaluate-commands %sh{
            FILE="$(readlink -f "''${kak_buffile%/*}/$kak_selection")"
            EXTENSION="''${FILE##*.}"

            openAsync () {
              ABDUCO_SESSIONS=$(abduco | awk 'NR > 1 {print $NF}')
              ABDUCO_NEW=$(echo $ABDUCO_SESSIONS | step)
              abduco -f -n $ABDUCO_NEW "$1" "$FILE" 
            }

            if [[ $EXTENSION == md ]]; then
              echo "edit" "'"$FILE"'"
            else
              openAsync xdg-open
            fi
        }
        try %{ focus %opt{jumpclient} }
    }
}


# Key Bindings
# ─────────────────────────


hook global BufSetOption filetype=haskell %{
  map buffer user = -docstring 'repl-eval' ': repl-bridge haskell send<ret>R'
  map buffer user s -docstring 'repl-send' ': repl-bridge haskell send<ret>'
}

hook global BufSetOption filetype=r %{
  map buffer user = -docstring 'repl-eval' ': repl-bridge r send<ret>R'
  map buffer user s -docstring 'repl-send' ': repl-bridge r send<ret>'
}

hook global BufSetOption filetype=python %{
  map buffer user = -docstring 'repl-eval' ': repl-bridge python send<ret>R'
  map buffer user s -docstring 'repl-send' ': repl-bridge python send<ret>'
}

hook global BufSetOption filetype=markdown %{
  map buffer user e -docstring 'wiki-follow' ': wiki-follow-link<ret>'
}

hook global BufSetOption filetype=kak %{
  define-command sys-eval 'eval %val{selection}'
  map buffer user r -docstring 'eval selection' ':sys-eval<ret>'
}

map global user d ':edit "%val{config}/../nixpkgs/home.nix"<ret>' -docstring 'edit kakrc'

